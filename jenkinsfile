pipeline {
    agent {
        label 'buildrunnode' // Runs all stages on a node with this label
    }
    tools {
        jdk 'JDK17'
        nodejs 'node23'
    }
    //environment {
        //SCANNER_HOME = tool 'sonar-scanner'
    //}
    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout from Git') {
            steps {
                git branch: 'main', url: 'https://github.com/hanuscm/gitrepo.git'
                sh 'ls -la'  // Verify files after checkout
                sh 'cd ${env.WORKSPACE}/complete'
                sh 'ls -lrt'
                sh 'mvn clean package'
            }
        }
        /*stage('SonarQube Analysis') {
            steps {
                sh '/opt/sonar-scanner-5.0.1.3006-linux/bin/sonar-scanner ' +
                         '-Dsonar.projectName=test ' +
                         '-Dsonar.projectVersion=test ' +
                         '-Dsonar.projectKey=1.0 ' +
                         '-Dsonar.sources=/var/lib/jenkins/workspace/pipeline-docker/bookmyshow-app/src ' +
                         '-Dsonar.java.binaries=/var/lib/jenkins/workspace/pipeline-docker/bookmyshow-app/target/classes ' +
                         '-Dsonar.host.url=http://localhost:9000 ' +
                         '-Dsonar.token=sqa_efe87919cd591baf02f90f4b5fe23341e370b910'
                }
            }*/
        
        //stage('Quality Gate') {
            //steps {
                //script {
                    //waitForQualityGate abortPipeline: false, credentialsId: 'sqa_efe87919cd591baf02f90f4b5fe23341e370b910'
                //}
            //}
        //}
        
        
        stage('Docker Build & Push') {
            steps {
                script {
                    //withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {
                        sh ''' 
                        echo "Building Docker image..."
                        chmod 775  ${WORKSPACE}/complete/Dockerfile
        		cd ${WORKSPACE}/complete/
                        docker build --no-cache --network=host -t sailajajaswi/dockerhub:latest -f ${WORKSPACE}/complete/Dockerfile .

                        echo "Pushing Docker image to registry..."
                        docker login --username sailajajaswi --password Hany@7869
                        docker push sailajajaswi/dockerhub:latest
                        '''
                    //}
                }
            }
        }
        stage('Deploy to Container') {
            steps {
                sh ''' 
                echo "Stopping and removing old container..."
                docker stop gitrepo || true
                docker rm gitrepo || true

                echo "Running new container on port 8081..."
                docker run  -d --name gitrepo -p 8081:8081 sailajajaswi/dockerhub:latest
                #docker run -d --restart=always --name bms -p 3000:3000 sailajajaswi/dockerhub:latest

                echo "Checking running containers..."
                docker ps -a

                echo "Fetching logs..."
                sleep 5  # Give time for the app to start
                docker logs bms
                '''
            }
        }
		
	  }
    }
    
    //}
//}
